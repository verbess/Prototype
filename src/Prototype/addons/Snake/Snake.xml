<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snake</name>
    </assembly>
    <members>
        <member name="T:Snake.DataPool">
            <summary>
            Represents a thread-safe data pool that functions as a collection of keys and data.
            </summary>
        </member>
        <member name="M:Snake.DataPool.TryGetData(System.Type,System.String,Snake.IKeyed@)">
            <summary>
            Attempts to get the data associated with the specified key from the data pool.
            </summary>
            <param name="type">The type of the data to get.</param>
            <param name="key">The key of the data to get.</param>
            <param name="data">
            When this method returns, contains the data obtained from the data pool that has the specified key, or the
            default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns><c>true</c> if the key was found in the data pool; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Snake.DataPool.TryAdd(Snake.IKeyed)">
            <summary>
            Attempts to add a data to the data pool.
            </summary>
            <param name="data">The data to add.</param>
            <returns>
            <c>true</c> if the data was added to the data pool successfully; <c>false</c> if the data already exists.
            </returns>
        </member>
        <member name="M:Snake.DataPool.TryRemove(System.Type)">
            <summary>
            Attempts to remove a series of data that has the specified type from the data pool.
            </summary>
            <param name="type">The type of the data to remove.</param>
            <returns>
            <c>true</c> if the data were removed from the data pool successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.DataPool.TryRemove(System.Type,System.String,Snake.IKeyed@)">
            <summary>
            Attempts to remove and return the data that has the specified key from the data pool.
            </summary>
            <param name="type">The type of the data to remove and return.</param>
            <param name="key">The key of the data to remove and return.</param>
            <param name="data">
            When this method returns, contains the data removed from the data pool that has the specified key, or the
            default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns>
            <c>true</c> if the data was removed from the data pool successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.DataPool.Clear">
            <summary>
            Clears all keys and data from the data pool.
            </summary>
        </member>
        <member name="T:Snake.DataPool.DataContainer">
            <summary>
            Represents a container of key/data pairs.
            </summary>
        </member>
        <member name="M:Snake.DataPool.DataContainer.TryGetData(System.String,Snake.IKeyed@)">
            <summary>
            Attempts to get the data associated with the specified key from the data container.
            </summary>
            <param name="key">The key of the data to get.</param>
            <param name="data">
            When this method returns, contains the data obtained from the data container that has the specified key, or
            the default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns><c>true</c> if the key was found in the data container; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Snake.DataPool.DataContainer.TryAdd(Snake.IKeyed)">
            <summary>
            Attempts to add a data to the data container.
            </summary>
            <param name="data">The data to add.</param>
            <returns>
            <c>true</c> if the data was added to the data container successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.DataPool.DataContainer.TryRemove(System.String,Snake.IKeyed@)">
            <summary>
            Attempts to remove and return the data that has the specified key from the data container.
            </summary>
            <param name="key">The key of the data to remove and return.</param>
            <param name="data">
            When this method returns, contains the data removed from the data container that has the specified key, or
            the default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns>
            <c>true</c> if the data was removed from the data container successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Snake.IKeyed">
            <summary>
            Defines a property for data querying.
            </summary>
        </member>
        <member name="P:Snake.IKeyed.Key">
            <summary>
            Gets the key of the object.
            </summary>
        </member>
        <member name="T:Snake.Messages">
            <summary>
            Serves as the resource class for exception error message constants.
            </summary>
        </member>
        <member name="F:Snake.Messages.Snake_Exception">
            <summary>
            Snake framework error.
            </summary>
        </member>
        <member name="T:Snake.SnakeException">
            <summary>
            Serves as the base class for exceptions in the <see cref="N:Snake" /> namespace.
            </summary>
        </member>
        <member name="M:Snake.SnakeException.#ctor">
            <summary>
            Initializes a new instance of the this class.
            </summary>
        </member>
        <member name="M:Snake.SnakeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the this class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Snake.SnakeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the this class with a specified error message and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the param is not a null reference, the current
            exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="T:Snake.Data.DataModule">
            <summary>
            Represents a data module that stores and retrieves data objects.
            </summary>
        </member>
        <member name="M:Snake.Data.DataModule.TryGetData``1(System.String,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryGetData(System.Type,System.String,Snake.IKeyed@)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryAdd(Snake.IKeyed)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryRemove``1">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryRemove(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryRemove``1(System.String,``0@)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.TryRemove(System.Type,System.String,Snake.IKeyed@)">
            <inheritdoc />
        </member>
        <member name="M:Snake.Data.DataModule.Clear">
            <inheritdoc />
        </member>
        <member name="T:Snake.Data.IDataModule">
            <summary>
            Defines methods to access a data module that stores and retrieves data objects.
            </summary>
        </member>
        <member name="M:Snake.Data.IDataModule.TryGetData``1(System.String,``0@)">
            <summary>
            Attempts to get the data associated with the specified key from the data module.
            </summary>
            <typeparam name="T">The type of the data to get.</typeparam>
            <param name="key">The key of the data to get.</param>
            <param name="data">
            When this method returns, contains the data obtained from the data module that has the specified key, or the
            default value of the <typeparamref name="T" /> if the operation failed.
            </param>
            <returns><c>true</c> if the key was found in the data module; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryGetData(System.Type,System.String,Snake.IKeyed@)">
            <summary>
            Attempts to get the data associated with the specified key from the data module.
            </summary>
            <param name="type">The type of the data to get.</param>
            <param name="key">The key of the data to get.</param>
            <param name="data">
            When this method returns, contains the data obtained from the data module that has the specified key, or the
            default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns><c>true</c> if the key was found in the data module; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryAdd(Snake.IKeyed)">
            <summary>
            Attempts to add a data to the data module.
            </summary>
            <param name="data">The data to add.</param>
            <returns><c>true</c> if the data was added to the data module successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryRemove``1">
            <summary>
            Attempts to remove a series of data that has the specified type from the data module.
            </summary>
            <typeparam name="T">The type of the data to remove.</typeparam>
            <returns>
            <c>true</c> if the data were removed from the data module successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryRemove(System.Type)">
            <summary>
            Attempts to remove a series of data that has the specified type from the data module.
            </summary>
            <param name="type">The type of the data to remove.</param>
            <returns>
            <c>true</c> if the data were removed from the data module successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryRemove``1(System.String,``0@)">
            <summary>
            Attempts to remove and return the data that has the specified key from the data module.
            </summary>
            <typeparam name="T">The type of the data to remove and return.</typeparam>
            <param name="key">The key of the data to remove and return.</param>
            <param name="data">
            When this method returns, contains the data removed from the data module that has the specified key, or the
            default value of the <typeparamref name="T" /> if the operation failed.
            </param>
            <returns>
            <c>true</c> if the data was removed from the data module successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.Data.IDataModule.TryRemove(System.Type,System.String,Snake.IKeyed@)">
            <summary>
            Attempts to remove and return the data that has the specified key from the data module.
            </summary>
            <param name="type">The type of the data to remove and return.</param>
            <param name="key">The key of the data to remove and return.</param>
            <param name="data">
            When this method returns, contains the data removed from the data module that has the specified key, or the
            default value of the <see cref="T:Snake.IKeyed" /> if the operation failed.
            </param>
            <returns>
            <c>true</c> if the data was removed from the data module successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Snake.Data.IDataModule.Clear">
            <summary>
            Clears all keys and data from the data module.
            </summary>
        </member>
    </members>
</doc>
